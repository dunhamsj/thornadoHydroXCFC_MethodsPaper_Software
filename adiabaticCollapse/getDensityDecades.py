#!/usr/bin/env python3

import os

from datetime import datetime
import numpy as np
import matplotlib.pyplot as plt
plt.style.use( 'publication.sty' )
import yt
yt.funcs.mylog.setLevel(40) # Suppress yt warnings

import globalVariables as gv

from myUtilitiesModule import getPlotfileNumberArray

plotfileDirectoryRoot \
  = gv.dataDirectory + 'adiabaticCollapse/'
dataDirectory \
  = plotfileDirectoryRoot + 'processedData/'

def findDensityDecades( idSuffix ):

    useEvery = 1

    ID = 'AdiabaticCollapse_XCFC'

    plotfileNameRoot = ID + '.plt'

    plotfileDirectory \
      = plotfileDirectoryRoot + '{:}/'.format( ID + idSuffix )

    field = 'PF_D'

    plotfileNumberArray \
      = getPlotfileNumberArray \
          ( plotfileDirectory, \
            plotfileNameRoot )

    SSi = 0
    SSf = plotfileNumberArray.shape[0]-1
    nSS = plotfileNumberArray.shape[0]

    nSS = nSS // useEvery

    densityDecades = np.logspace( 10, 14, 5 )
    nDecades = densityDecades.shape[0]

    foundDecade = [ False for iDecade in range( nDecades ) ]
    foundDecade = np.array( foundDecade, bool )

    pfn = np.empty( (nDecades), np.int64   )
    ind = np.empty( (nDecades), np.int64   )
    t   = np.empty( (nDecades), np.float64 )

    SS = np.linspace( SSi, SSf, nSS, dtype = np.int64 )

    density       = 0.0
    bounceDensity = 0.0
    bounceTime    = 0.0
    bounceIndex   = 0

    print( '\n  Running getDensityDecades for {:}' \
           .format( 'AdiabaticCollapse_XCFC{:}'.format( idSuffix ) ) )
    print(   '  -----------------------------' )

    for iSS in range( nSS ):

        if ( iSS % useEvery == 0 ) :
            print( '  {:}/{:}'.format( iSS, nSS ) )
            #print( '\r  {:}/{:}'.format( iSS, nSS ), end = '\r' )

        if iSS > 2500: continue
        plotfileName \
          = plotfileDirectory \
              + plotfileNameRoot \
              + str( plotfileNumberArray[SS[iSS]] ).zfill( 8 )

        ds = yt.load( '{:}'.format( plotfileName ) )
        time = ds.current_time.to_ndarray()

        # Interpolate to origin to get central density
        origin = [np.array([0.0,np.pi/2.0,np.pi])];

        density \
          = np.copy( ds.find_field_values_at_points \
                       ( ("boxlib",field), origin ) )[0]

        if ( density > bounceDensity ) :
            bounceDensity = density
            bounceTime    = time
            bounceIndex   = SS[iSS]

        for iDecade in range( nDecades ) :

            if ( density > densityDecades[iDecade] \
                 and not foundDecade[iDecade] ) :

                foundDecade[iDecade] = True
                ind        [iDecade] = iSS
                pfn        [iDecade] = plotfileNumberArray[SS[iSS]]
                t          [iDecade] = time

                print()
                print( '  ind : {:d}'         .format( ind[iDecade]  ) )
                print( '  pfn : {:d}'         .format( pfn[iDecade]  ) )
                print( '  tc  : {:.3e} ms'    .format( t  [iDecade]  ) )
                print( '  rhoc: {:.3e} g/cm^3'.format( bounceDensity ) )
                print()

    print( '  bounceIndex: {:d}'           .format( bounceIndex ) )
    print( '  bounceTime: {:.3e} ms'       .format( bounceTime ) )
    print( '  bounceDensity: {:.3e} g/cm^3'.format( bounceDensity ) )
    print( '  ind: ', ind )
    print( '  pfn: ', pfn )

    filename \
       = '{:}DensityDecades{:}.dat' \
          .format( dataDirectory, idSuffix )
    header \
      = '# Filename: {:}\n\
# Generated by {:}\n\
# on {:}' \
.format( filename, __file__, datetime.today() )
    with open( filename, 'w' ) as f:
        f.write( header + '\n' )
        f.write( 'bounceIndex = {:d}\n'.format( bounceIndex ) )
        f.write( 'bounceTime = {:.16e} # ms\n'.format( bounceTime ) )
        f.write( 'bounceDensity = {:.16e} # g/cm^3\n'.format( bounceDensity ) )

        f.write( 'ind = [ ' )
        for iDecade in range( nDecades-1 ):
            f.write( '{:} '.format( ind[iDecade] ) )
        f.write( '{:} ]\n'.format( ind[nDecades-1] ) )

        f.write( 'pfn = [ ' )
        for iDecade in range( nDecades-1 ):
            f.write( '{:} '.format( pfn[iDecade] ) )
        f.write( '{:} ]\n'.format( pfn[nDecades-1] ) )

    os.system( 'chmod 444 {:}'.format( filename ) )
    print( '  Saved {:}'.format( filename ) )

if __name__ == '__main__':

    findDensityDecades( '_AMR_dr0.25km' )
    findDensityDecades( '_AMR_dr0.50km' )
    findDensityDecades( '_AMR_dr1.00km' )
    findDensityDecades( '_Uni_dr0.50km' )
    findDensityDecades( '_Uni_dr1.00km' )
    findDensityDecades( '_AMR_dr0.25km_nLevels04' )
    findDensityDecades( '_AMR_dr0.25km_HLLC' )

    os.system( 'rm -rf __pycache__' )
